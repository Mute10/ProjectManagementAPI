# Project Management API

A powerful backend API for managing the entire lifecycle of projects and tasks. Built with FastAPI and PostgreSQL, this system enables users to create, update, track, and analyze projects through clearly defined phases such as initiation, planning, execution, review, and completion.

## üöÄ Features

- Create and manage projects with optional descriptions and timelines  
- Track task statuses within multiple project phases  
- Full CRUD operations for both projects and tasks  
- Data persistence using PostgreSQL and SQLAlchemy ORM  
- Cleanly separated logic, database models, and API routing  
- Designed for performance and clarity in real-world backend environments  
- Optional CLI support for local usage and automation

## üß† Why This Exists

This project was designed to demonstrate practical backend development skills, with a strong focus on:
- Real-world CRUD implementation
- Separation of concerns between database models, logic, and API
- Clean, maintainable code structure
- Readability and testability

## üõ†Ô∏è Tech Stack

- **FastAPI** ‚Äî high-performance web framework  
- **PostgreSQL** ‚Äî relational database  
- **SQLAlchemy** ‚Äî ORM for database models  
- **Pydantic** ‚Äî data validation and schema management  
- **unittest** ‚Äî built-in Python testing  
- **CLI (optional)** ‚Äî for command-line project and task creation  

## üì¶ Installation

```bash
# 1. Clone the repo
git clone https://github.com/Mute10/ProjectManagementAPI.git
cd ProjectManagementAPI

# 2. Set up virtual environment (optional but recommended)
python -m venv env
source env/bin/activate  # On Windows: env\Scripts\activate

# 3. Install dependencies
pip install -r requirements.txt

# 4. Set up the database (PostgreSQL must be running)
# Update your connection string in tools.py or via environment variables

# 5. Run the app
uvicorn API:app --reload


Usage:
Visit: http://localhost:8000/docs to explore the auto-generated Swagger UI
Use curl, Postman, or the CLI (if configured) to create and manage projects and tasks
All tasks are tied to a project and move through lifecycle phases

Run tests with:
python -m unittest file.py



(c) 2025 Mike Siwik
